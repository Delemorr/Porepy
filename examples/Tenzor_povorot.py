import math
import numpy as np
"""
[::-1] - создает неглубокую копию исходного списка в обратном порядке. Можно также использовать reversed()
который производил бы обратный итератор по списку, а не фактическое копирование списка (более экономно расходует память).

* - делает каждый подсписок в исходном списке отдельным аргументом для zip() (т. е. распаковывает список)

zip() - принимает по одному элементу из каждого аргумента и составляет из них список (ну, кортеж), и
 повторяется до тех пор, пока не будут исчерпаны все подсписки. Именно здесь на самом деле происходит транспозиция.

list() преобразует выходные данные zip() в список.
"""
k = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     ]

kk = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
print(list(zip(*k))[::-1])
"Произвольная ось"
x = 11
y = 11
z = 0
fi = np.radians(90)
Mpov = [[math.cos(fi)+(1-math.cos(fi))*x**2,     (1-math.cos(fi))*x*y - math.sin(fi)*z,   (1-math.cos(fi))*x*z + math.sin(fi)*y],
       [(1-math.cos(fi))*x*y + math.sin(fi)*z,   math.cos(fi)+(1-math.cos(fi))*y**2,     (1-math.cos(fi))*y*z - math.sin(fi)*x],
       [(1-math.cos(fi))*z*x + math.sin(fi)*y,   (1-math.cos(fi))*y*z - math.sin(fi)*x,   math.cos(fi)+(1-math.cos(fi))*z**2]]

print(Mpov)

z = np.dot(Mpov,kk)

print(z)

